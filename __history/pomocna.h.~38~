//---------------------------------------------------------------------------

#ifndef pomocnaH
#define pomocnaH
#include <vector>
#include <algorithm>
#define PI 3.14159265

using namespace std;

struct Tacka {
	int x;
	int y;
	Tacka():x(0),y(0) {}
	Tacka(int X, int Y):x(X),y(Y) {}
	Tacka(const Tacka &t){ x = t.x; y = t.y; }
	void Crtaj(TImage*) const;
	void Crtaj2(TImage*) const;
};

bool operator==(Tacka,Tacka);
bool operator!=(Tacka,Tacka);
bool operator<(Tacka,Tacka);

struct Duz {
	Tacka pocetna;
	Tacka krajnja;
	Duz(Tacka A,Tacka B):pocetna(A),krajnja(B) {
//		if(pocetna < krajnja)
//		swap(pocetna,krajnja);
	}
	void Crtaj(TImage*) const;
    bool vertikalna() { return pocetna.x == krajnja.x; }
};

struct Trougao {
	Tacka A;
	Tacka B;
	Tacka C;
	Trougao(Tacka A, Tacka B, Tacka C):A(A),B(B),C(C) {}
	void Crtaj(TImage*) const;
};

struct Kamera {
	Tacka pozicija;
	Tacka pocetakVidokruga;
	Tacka krajVidokruga;
	vector<Tacka> vidokrug;

	int ugaoRotacije = 1;
	int brojac  = 0;
	Kamera(Tacka t) {
		Tacka pomocna = Tacka(-90000, t.y);
		pozicija = Tacka(t);
		pocetakVidokruga =  rotirajTacku(pomocna, 330);
		krajVidokruga = rotirajTacku(pomocna, 30);
	}

	void rotirajKameru();
	void iscrtajVidokrug(TImage*);
	void crtaj(TImage*) const;
	void resetVidokrug();
	void odrediVidokrug(vector<Tacka>, TImage*, TEdit*, TEdit*);
	void odrediVidokrug2(vector<Tacka>, TImage*, TEdit*, TEdit*);

private:
	Tacka rotirajTacku(Tacka, double);
	Tacka rubnaTacka(Duz);
	bool pripadaVidokrugu(Tacka);
	Tacka sjenkaTacke(Tacka,vector<Tacka>);
	bool blizaTacka(Tacka, Tacka);

};

double ugaoIzmedjuDuzi(Tacka, Tacka, Tacka);
double ugaoIzmedjuDuzi2(Tacka, Tacka, Tacka);
void iscrtajPoligon(vector<Tacka> &poligon, TImage *image);

int Orijentacija(Tacka,Tacka,Tacka);
int PresjekDuzi(Duz, Duz);
bool tackaNaDuzi(Tacka, Tacka, Tacka);
bool daLiJeTackaUnutarTrougla(Tacka,Trougao);

bool daLiJeUnutarProstogMnogougla(Duz, vector<Tacka>&);
double stepeniURadijanima(double);
double radijaniUstepenima(double);
Tacka tackaPresjeka(Tacka, Tacka, Tacka, Tacka);

Tacka tackaPresjeka2(Duz, Duz);
double determinanta(double a, double b, double c, double d);
double udaljenost(Tacka, Tacka);
bool blizaStranica(Tacka, Duz, Duz);

bool onSegment(Tacka p, Tacka q, Tacka r)
{
	if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
       return true;

    return false;
}

// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are colinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Tacka p, Tacka q, Tacka r)
{
    // See https://www.geeksforgeeks.org/orientation-3-ordered-points/
    // for details of below formula.
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);

    if (val == 0) return 0;  // colinear

    return (val > 0)? 1: 2; // clock or counterclock wise
}

// The main function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
bool doIntersect(Tacka p1, Tacka q1, Tacka p2, Tacka q2)
{
    // Find the four orientations needed for general and
    // special cases
    int o1 = orientation(p1, q1, p2);
    int o2 = orientation(p1, q1, q2);
    int o3 = orientation(p2, q2, p1);
    int o4 = orientation(p2, q2, q1);

    // General case
    if (o1 != o2 && o3 != o4)
        return true;

    // Special Cases
    // p1, q1 and p2 are colinear and p2 lies on segment p1q1
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;

    // p1, q1 and q2 are colinear and q2 lies on segment p1q1
    if (o2 == 0 && onSegment(p1, q2, q1)) return true;

    // p2, q2 and p1 are colinear and p1 lies on segment p2q2
    if (o3 == 0 && onSegment(p2, p1, q2)) return true;

     // p2, q2 and q1 are colinear and q1 lies on segment p2q2
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;

    return false; // Doesn't fall in any of the above cases
}



//---------------------------------------------------------------------------
#endif
